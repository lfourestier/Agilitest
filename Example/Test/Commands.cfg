# Free to use at your own responsibility
#
# Specify the commands to be applied for each test frameworks in order to run the test cases one by one.
#
# RunTest parses the specified directories and make a dictionary of all the test cases to be potentially run. Then it will try to run them one by one, individually.
# BUT it does not know how to run the test cases individually because it is project/platform dependent. You need to tell it how to run
# test cases per supported framework.
# 
# For instance, to run Gtest tests, you need to tell it how to call the previously compiled (Not part of RunTest responsibility) Gtest test application, that gives something like this: ./MyCompiledGtestApp
# But it is still not enough, you need to specify how to run each test individually with the macros @SUITE and @CASE, that gives something like this: ./MyCompiledGtestApp --gtest_filter=@SUITE.@CASE
# And even more, you need to specify where to store the intermediate test result for that single test so that RunTest can retrieve it and parse and make its overall report, that gives something like this: ./MyCompiledGtestApp --gtest_filter=@SUITE.@CASE --gtest_output=xml:@RESULT
# Further, you can make the command based on the current command file directory, so that it can be path agnostic, that give something like this: @PWD/MyCompiledGtestApp --gtest_filter=@SUITE.@CASE --gtest_output=xml:@PWD/@RESULT
#
# Supported framework so far:
# Gtest
# Junit
# Cppunit
# Cunit
# Pytest
#
# ** A command is a @@ separated list of commands: 
# "<command1> @@ <command2> @@ <command3>" and so on...
# Where: 
# <command> is a normal command line (Ex: echo "Hello world!")
# In which:
# @CASE will be replaced by the test case name
# @SUITE will be replaced by the test suite name
# @RESULT will be replaced by the result string specified in the optional "result" param.
# @PWD will be replaced by the directory of that command file.
# Ex: "echo Run @PWD/@SUITE.@CASE into @RESULT @@ echo Done"
#
# Commands are then run one after each other.
#
# ** Intermediate result file:
# As test cases are run one by one, each test result of each test case needs to be collected. That's the aim of this intermediate test result file.
# After each test case run, RunTest will look for that file to parse the result of the test case. RunTest gathers them all in the final test report afterwards. 
# the intermediate result file location is specified with the "result" param.
# if not specified, only the output will be parsed.

[Gtest]
command = echo "Run Gtest case @CASE in @SUITE" @@ @PWD/Gtest/Build/Gtest --gtest_filter=@SUITE.@CASE --gtest_output=xml:@RESULT @@ echo "Done!"
result = result.xml

[Junit]
command = echo "Run Junit case @CASE in @SUITE" @@ echo "Done!"
result = result.xml

[Cppunit]
command = echo "Run Cppunit case @CASE in @SUITE" @@ echo "Done!"
result = result.xml

[Cunit]
command = echo "Run Cunit case @CASE in @SUITE" @@ @PWD/Cunit/Build/Cunit @SUITE @CASE @@ echo "Done!"
#result = result.xml

[Pytest]
command = echo "Run Cunit case @CASE in @SUITE" @@ py.test @PWD/Pytest/@SUITE.py::@CASE --junitxml=@RESULT @@ echo "Done!"
result = result.xml
