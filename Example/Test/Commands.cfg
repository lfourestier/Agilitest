# Free to use at your own responsibility
#
# Specify the commands to be applied for each test frameworks in order to run the tests one by one.
#
# Supported framework so far:
# Gtest
# Junit
# Cppunit
# Cunit
#
# @@ separated commands: 
# "<command1> @@ <command2> @@ <command3>" and so on...
# Where: 
# <command> is a normal command line (Ex: echo "Hello world!")
# In which:
# @CASE will be replaced by the test case name
# @SUITE will be replaced by the test suite name
# @RESULT will be replaced by the result string specified in the optional "result" param.
# Ex: "echo Run @CASE in @SUITE @@ echo Done"
#
# Commands are then run one after each other.
#
# After each test case run, the intermediate result file is specified with the "result" param.
# if not specified, only the output will be parsed.

[Gtest]
command = echo "Run Gtest case @CASE in @SUITE" @@ ../Example/Test/Gtest/Build/Gtest --gtest_filter=@SUITE.@CASE --gtest_output=xml:@RESULT @@ echo "Done!"
#command = echo "Run Gtest case @CASE in @SUITE" @@ echo "Done!"
result = ../Example/Test/result.xml

[Junit]
command = echo "Run Junit case @CASE in @SUITE" @@ echo "Done!"
result = ../Example/Test/result.xml

[Cppunit]
command = echo "Run Cppunit case @CASE in @SUITE" @@ echo "Done!"
result = ../Example/Test/result.xml

[Cunit]
command = echo "Run Cunit case @CASE in @SUITE" @@ ../Example/Test/Cunit/Build/Cunit @SUITE @CASE @@ echo "Done!"
#command = echo "Run Cunit case @CASE in @SUITE" @@ echo "Done!"
#result = ../Example/Test/result.out

[Pytest]
command = echo "Run Cunit case @CASE in @SUITE" @@ py.test ../Example/Test/Pytest/@SUITE.py::@CASE --junitxml=@RESULT @@ echo "Done!"
#command = echo "Run Pytest case @CASE in @SUITE" @@ echo "Done!"
result = ../Example/Test/result.xml
